% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/PipeOpImpute.R
\docType{data}
\name{mlr_pipeops_impute}
\alias{mlr_pipeops_impute}
\alias{PipeOpImpute}
\title{PipeOpImpute}
\format{\code{\link{R6Class}} object inheriting from \code{\link{PipeOpTaskPreprocSimple}}/\code{\link{PipeOpTaskPreproc}}/\code{\link{PipeOp}}.}
\description{
Impute missing values using varying methods.
\itemize{
\item \code{numeric} or \code{integer} features are imputed by \code{method_num}.
\item \code{factor}, \code{ordered}, and \code{character} features are imported by \code{method_fct}.
\item \code{logical} features are always imputed by sampling from the training column.
}
}
\section{Construction}{
\preformatted{PipeOpImpute$new(id = "impute", param_vals = list())
}
\itemize{
\item \code{id} :: \code{character(1)}
Identifier of the resulting  object, defaulting to \code{"impute"}.
\item \code{param_vals} :: named \code{list}\cr
List of hyperparameter settings, overwriting the hyperparameter settings that would otherwise be set during construction. Default \code{list()}.
}
}

\section{State}{

\code{$state} is a named \code{list} with the \code{$state} elements inherited from \code{\link{PipeOpTaskPreproc}}, as well as:
\itemize{
\item TO BE DESCRIBED ( PipeOp will be changed shortly )
}
}

\section{Parameters}{

The parameters are the parameters inherited from the \code{\link{PipeOpTaskPreproc}}, as well as:
\itemize{
\item TO BE DESCRIBED ( PipeOp will be changed shortly )
}
}

\section{Internals}{

Will be refactored shortly.
}

\section{Fields}{

Fields inherited from \code{\link{PipeOpTaskPreproc}}/\code{\link{PipeOp}}.
}

\section{Methods}{

Methods inherited from \code{\link{PipeOpTaskPreproc}}/\code{\link{PipeOp}}.
}

\examples{
task = mlr3::mlr_tasks$get("pima")
sum(complete.cases(task$data()))

po = mlr_pipeops$get("impute")
new_task = po$train(list(task = task))[[1]]
sum(complete.cases(new_task$data()))

}
\seealso{
Other PipeOps: \code{\link{PipeOpEnsemble}},
  \code{\link{PipeOpTaskPreproc}}, \code{\link{PipeOp}},
  \code{\link{mlr_pipeops_branch}},
  \code{\link{mlr_pipeops_chunk}},
  \code{\link{mlr_pipeops_classbalancing}},
  \code{\link{mlr_pipeops_classifavg}},
  \code{\link{mlr_pipeops_colapply}},
  \code{\link{mlr_pipeops_copy}},
  \code{\link{mlr_pipeops_encode}},
  \code{\link{mlr_pipeops_featureunion}},
  \code{\link{mlr_pipeops_filter}},
  \code{\link{mlr_pipeops_learner}},
  \code{\link{mlr_pipeops_mutate}},
  \code{\link{mlr_pipeops_nop}},
  \code{\link{mlr_pipeops_pca}},
  \code{\link{mlr_pipeops_regravg}},
  \code{\link{mlr_pipeops_scale}},
  \code{\link{mlr_pipeops_select}},
  \code{\link{mlr_pipeops_subsample}},
  \code{\link{mlr_pipeops_unbranch}},
  \code{\link{mlr_pipeops}}
}
\concept{PipeOps}
\keyword{datasets}
