% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/PipeOpScale.R
\docType{data}
\name{mlr_pipeops_scale}
\alias{mlr_pipeops_scale}
\alias{PipeOpScale}
\title{PipeOpScale}
\format{\code{\link{R6Class}} object inheriting from \code{\link{PipeOpTaskPreproc}}/\code{\link{PipeOp}}.}
\description{
Centers all numeric features to mean = 0 (if \code{center} parameter is \code{TRUE}) and scales them
by dividing them by their root-mean-square (if \code{scale} parameter is \code{TRUE}).

The root-mean-square here is defined as \code{sqrt(sum(x^2)/(length(x)-1))}. If the \code{center} parameter
is \code{TRUE}, this corresponds to the \code{\link[stats:sd]{sd()}}.
}
\section{Construction}{
\preformatted{PipeOpScale$new(id = "scale", param_vals = list())
}

Identifier of resulting object, default \code{"scale"}.
\itemize{
\item \code{param_vals} :: named \code{list}\cr
List of hyperparameter settings, overwriting the hyperparameter settings that would otherwise be set during construction. Default \code{list()}.
}
}

\section{Input and Output Channels}{

Input and output channels are inherited from \code{\link{PipeOpTaskPreproc}}.

The output is the input \code{\link[mlr3:Task]{Task}} with all affected numeric parameters centered and/or scaled.
}

\section{State}{

The \code{$state} is a named \code{list} with the \code{$state} elements inherited from \code{\link{PipeOpTaskPreproc}}, as well as:
\itemize{
\item \code{center} :: \code{numeric}\cr
The mean of each numeric feature during training, or 0 if \code{center} is \code{FALSE}. Will be subtracted during the predict phase.
\item \code{scale} :: \code{numeric}\cr
The root mean square, defined as \code{sqrt(sum(x^2)/(length(x)-1))}, of each feature during training, or 1 if \code{scale} is FALSE.
During predict phase, feaatures are divided by this.\cr
This is 1 for features that are constant during training if \code{center} is \code{TRUE}, to avoid division-by-zero.
}
}

\section{Parameters}{

The parameters are the parameters inherited from \code{\link{PipeOpTaskPreproc}}, as well as:
\itemize{
\item \code{center} :: \code{logical(1)}\cr
Whether to center  features, i.e. subtract their \code{mean()} from them. Default \code{TRUE}.
\item \code{scale} :: \code{logical(1)}\cr
Whether to scale features, i.e. divide them by \code{sqrt(sum(x^2)/(length(x)-1))}. Default \code{TRUE}.
}
}

\section{Internals}{

Uses the \code{\link[base:scale]{scale()}} function.
}

\section{Methods}{

Only methods inherited from \code{\link{PipeOpTaskPreproc}}/\code{\link{PipeOp}}.
}

\examples{
pos = mlr_pipeops$get("scale")

pos$train(list("iris"))[[1]]$data()

one_line_of_iris = mlr3::mlr_tasks$get("iris")$filter(13)

one_line_of_iris$data()

pos$predict(list(one_line_of_iris))[[1]]$data()
}
\seealso{
Other PipeOps: \code{\link{PipeOpEnsemble}},
  \code{\link{PipeOpTaskPreproc}}, \code{\link{PipeOp}},
  \code{\link{mlr_pipeops_branch}},
  \code{\link{mlr_pipeops_chunk}},
  \code{\link{mlr_pipeops_classbalancing}},
  \code{\link{mlr_pipeops_classifavg}},
  \code{\link{mlr_pipeops_colapply}},
  \code{\link{mlr_pipeops_copy}},
  \code{\link{mlr_pipeops_encode}},
  \code{\link{mlr_pipeops_featureunion}},
  \code{\link{mlr_pipeops_filter}},
  \code{\link{mlr_pipeops_impute}},
  \code{\link{mlr_pipeops_learner}},
  \code{\link{mlr_pipeops_mutate}},
  \code{\link{mlr_pipeops_nop}},
  \code{\link{mlr_pipeops_pca}},
  \code{\link{mlr_pipeops_regravg}},
  \code{\link{mlr_pipeops_select}},
  \code{\link{mlr_pipeops_subsample}},
  \code{\link{mlr_pipeops_unbranch}},
  \code{\link{mlr_pipeops}}
}
\concept{PipeOps}
\keyword{datasets}
