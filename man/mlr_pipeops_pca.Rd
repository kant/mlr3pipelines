% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/PipeOpPCA.R
\docType{data}
\name{mlr_pipeops_pca}
\alias{mlr_pipeops_pca}
\alias{PipeOpPCA}
\title{PipeOpPCA}
\format{\code{\link{R6Class}} object inheriting from \code{\link{PipeOpTaskPreproc}}/\code{\link{PipeOp}}.}
\description{
Extracts principle components from data. Only affects numerical features.
See \code{\link[stats:prcomp]{stats::prcomp()}} for details.
}
\section{Construction}{
\preformatted{PipeOpPCA$new(id = "pca", param_vals = list())
}

Identifier of resulting object, default \code{"pca"}.
\itemize{
\item \code{param_vals} :: named \code{list}\cr
List of hyperparameter settings, overwriting the hyperparameter settings that would otherwise be set during construction. Default \code{list()}.
}
}

\section{Input and Output Channels}{

Input and output channels are inherited from \code{\link{PipeOpTaskPreproc}}.

The output is the input \code{\link[mlr3:Task]{Task}} with all affected numeric parameters replaced by their principal components.
}

\section{State}{

The \code{$state} is a named \code{list} with the \code{$state} elements inherited from \code{\link{PipeOpTaskPreproc}}, as well as the elements of the \link[stats:prcomp]{"prcomp" class},
with the exception of the \code{$x} slot. These are in particular:
\itemize{
\item \code{sdev} :: \code{numeric}\cr
The standard deviations of the principal components.
\item \code{rotation} :: \code{matrix}\cr
The matrix of variable loadings.
\item \code{center} :: \code{numeric} | \code{logical(1)}\cr
The centering used, or \code{FALSE}.
\item \code{scale} :: \code{numeric} | \code{logical(1)}\cr
The scaling used, or \code{FALSE}.
}
}

\section{Parameters}{

The parameters are the parameters inherited from \code{\link{PipeOpTaskPreproc}}, as well as:
\itemize{
\item \code{center} :: \code{logical(1)}\cr
Indicating whether the features should be centered. Default is \code{FALSE}. See \code{\link[stats:prcomp]{prcomp()}}.
\item \code{scale.} :: \code{logical(1)}\cr
Whether to scale features to unit variance before analysis. Default is \code{FALSE}, but scaling is advisable. See \code{\link[stats:prcomp]{prcomp()}}.
\item \code{rank.} :: \code{integer(1)}\cr
Maximal number of principal components to be used. Default is \code{NULL}: use all components. See \code{\link[stats:prcomp]{prcomp()}}.
}
}

\section{Internals}{

Uses the \code{\link[stats:prcomp]{prcomp()}} function.
}

\section{Methods}{

Only methods inherited from \code{\link{PipeOpTaskPreproc}}/\code{\link{PipeOp}}.
}

\examples{
pop = mlr_pipeops$get("pca")

task = mlr3::mlr_tasks$get("iris")

task$data()

pop$train(list(task))[[1]]$data()

pop$state
}
\seealso{
Other PipeOps: \code{\link{PipeOpEnsemble}},
  \code{\link{PipeOpTaskPreproc}}, \code{\link{PipeOp}},
  \code{\link{mlr_pipeops_branch}},
  \code{\link{mlr_pipeops_chunk}},
  \code{\link{mlr_pipeops_classbalancing}},
  \code{\link{mlr_pipeops_classifavg}},
  \code{\link{mlr_pipeops_colapply}},
  \code{\link{mlr_pipeops_copy}},
  \code{\link{mlr_pipeops_encode}},
  \code{\link{mlr_pipeops_featureunion}},
  \code{\link{mlr_pipeops_filter}},
  \code{\link{mlr_pipeops_impute}},
  \code{\link{mlr_pipeops_learner}},
  \code{\link{mlr_pipeops_mutate}},
  \code{\link{mlr_pipeops_nop}},
  \code{\link{mlr_pipeops_regravg}},
  \code{\link{mlr_pipeops_scale}},
  \code{\link{mlr_pipeops_select}},
  \code{\link{mlr_pipeops_subsample}},
  \code{\link{mlr_pipeops_unbranch}},
  \code{\link{mlr_pipeops}}
}
\concept{PipeOps}
\keyword{datasets}
