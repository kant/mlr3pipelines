% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/PipeOpChunk.R
\docType{data}
\name{mlr_pipeops_chunk}
\alias{mlr_pipeops_chunk}
\alias{PipeOpChunk}
\title{PipeOpChunk}
\format{\code{\link{R6Class}} object inheriting from \code{\link{PipeOp}}.}
\description{
Chunks its input into \code{outnum} chunks.
Creates \code{outnum} \code{\link[mlr3:Task]{Task}}s during training, and
simply passes on the input during \code{outnum} times during prediction.
}
\section{Construction}{
\preformatted{PipeOpChunk$new(outnum, id = "chunk", param_vals = list())
}
\itemize{
\item \code{outnum} :: \code{numeric(1)}\cr
Number of output channels, and therefore number of chunks created.
Identifier of resulting object, default \code{"chunk"}.
\item \code{param_vals} :: named \code{list}\cr
List of hyperparameter settings, overwriting the hyperparameter settings that would otherwise be set during construction. Default \code{list()}.
}
}

\section{Input and Output}{

\code{\link{PipeOpChunk}} has one input channel named \code{"input"}, taking a \code{\link[mlr3:Task]{Task}} both during training and prediction.

\code{\link{PipeOpChunk}} has multiple output channels depending on the \code{options} construction argument, named \code{"output1"}, \code{"output2"}, ...
All output channels produce (respectively disjoint, random) subsets of the input \code{\link[mlr3:Task]{Task}} during training, and
pass on the original \code{\link[mlr3:Task]{Task}} during prediction.
}

\section{State}{

The \code{$state} is left empty (\code{list()}).
}

\section{Parameters}{

\itemize{
\item \code{shuffle} :: \code{logical(1)} \cr
Should the data be shuffled before chunking? Initialized to \code{TRUE}.
}
}

\section{Internals}{

Uses the \code{\link[mlr3misc:chunk_vector]{mlr3misc::chunk_vector()}} function.
}

\section{Fields}{

Only fields inherited from \code{\link{PipeOp}}.
}

\section{Methods}{

Only methods inherited from \code{\link{PipeOp}}.
}

\examples{
opc = mlr_pipeops$get("chunk", 2)

# watch the row number: 89 during training (task is chunked)...
opc$train(list("wine"))

# ... 178 during predict (task is copied)
opc$predict(list("wine"))
}
\seealso{
Other PipeOps: \code{\link{PipeOpEnsemble}},
  \code{\link{PipeOpTaskPreproc}}, \code{\link{PipeOp}},
  \code{\link{mlr_pipeops_branch}},
  \code{\link{mlr_pipeops_classbalancing}},
  \code{\link{mlr_pipeops_classifavg}},
  \code{\link{mlr_pipeops_colapply}},
  \code{\link{mlr_pipeops_copy}},
  \code{\link{mlr_pipeops_encode}},
  \code{\link{mlr_pipeops_featureunion}},
  \code{\link{mlr_pipeops_filter}},
  \code{\link{mlr_pipeops_impute}},
  \code{\link{mlr_pipeops_learner}},
  \code{\link{mlr_pipeops_mutate}},
  \code{\link{mlr_pipeops_nop}},
  \code{\link{mlr_pipeops_pca}},
  \code{\link{mlr_pipeops_regravg}},
  \code{\link{mlr_pipeops_scale}},
  \code{\link{mlr_pipeops_select}},
  \code{\link{mlr_pipeops_subsample}},
  \code{\link{mlr_pipeops_unbranch}},
  \code{\link{mlr_pipeops}}
}
\concept{PipeOps}
\keyword{datasets}
