% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/PipeOpNOP.R
\docType{data}
\name{mlr_pipeops_nop}
\alias{mlr_pipeops_nop}
\alias{PipeOpNOP}
\title{PipeOpNOP}
\format{\code{\link{R6Class}} object inheriting from \code{\link{PipeOp}}.}
\description{
Simply pushes the input forward.
Can be useful during \code{\link{Graph}} construction using the \code{\link{\%>>\%}}-operator to specify which \code{\link{PipeOp}} gets connected to which.
}
\section{Construction}{
\preformatted{PipeOpNOP$new(id = "nop", param_vals = list())
}

Identifier of resulting object, default \code{"nop"}.
\itemize{
\item \code{param_vals} :: named \code{list}\cr
List of hyperparameter settings, overwriting the hyperparameter settings that would otherwise be set during construction. Default \code{list()}.
}
}

\section{Input and Output Channels}{

\code{\link{PipeOpNOP}} has one input channel named \code{"input"}, taking any input (\code{"*"}) both during training and prediction.

\code{\link{PipeOpNOP}} has one output channel named \code{"output"}, producing the object given as input (\code{"*"}) without changes.
}

\section{State}{

The \code{$state} is left empty (\code{list()}).
}

\section{Parameters}{

\code{\link{PipeOpNOP}} has no parameters.
}

\section{Internals}{

\code{\link{PipeOpNOP}} is a useful "default" stand-in for a \code{\link{PipeOp}}/\code{\link{Graph}} that does nothing.
}

\section{Fields}{

Only fields inherited from \code{\link{PipeOp}}.
}

\section{Methods}{

Only methods inherited from \code{\link{PipeOp}}.
}

\examples{
nop = mlr_pipeops$get("nop")

nop$train(list(1))

# use `gunion` and `\%>>\%` to create a "bypass"
# next to "pca"
gr = gunion(list(
  mlr_pipeops$get("pca"),
  nop
)) \%>>\% mlr_pipeops$get("featureunion")

gr$train(list("iris"))[[1]]$data()
}
\seealso{
Other PipeOps: \code{\link{PipeOpEnsemble}},
  \code{\link{PipeOpTaskPreproc}}, \code{\link{PipeOp}},
  \code{\link{mlr_pipeops_branch}},
  \code{\link{mlr_pipeops_chunk}},
  \code{\link{mlr_pipeops_classbalancing}},
  \code{\link{mlr_pipeops_classifavg}},
  \code{\link{mlr_pipeops_colapply}},
  \code{\link{mlr_pipeops_copy}},
  \code{\link{mlr_pipeops_encode}},
  \code{\link{mlr_pipeops_featureunion}},
  \code{\link{mlr_pipeops_filter}},
  \code{\link{mlr_pipeops_impute}},
  \code{\link{mlr_pipeops_learner}},
  \code{\link{mlr_pipeops_mutate}},
  \code{\link{mlr_pipeops_pca}},
  \code{\link{mlr_pipeops_regravg}},
  \code{\link{mlr_pipeops_scale}},
  \code{\link{mlr_pipeops_select}},
  \code{\link{mlr_pipeops_subsample}},
  \code{\link{mlr_pipeops_unbranch}},
  \code{\link{mlr_pipeops}}

Other Placeholder Pipeops: \code{\link{mlr_pipeops_copy}}
}
\concept{PipeOps}
\concept{Placeholder Pipeops}
\keyword{datasets}
